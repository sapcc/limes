// SPDX-FileCopyrightText: 2025 SAP SE or an SAP affiliate company
// SPDX-License-Identifier: Apache-2.0

package core

import (
	"bytes"
	"errors"
	"fmt"
	"html/template"
	"time"

	"github.com/sapcc/limes/internal/db"
	"github.com/sapcc/limes/internal/util"
)

// CommitmentGroupNotification contains data for rendering mails notifying about commitment workflows (confirmation or expiration).
type CommitmentGroupNotification struct {
	DomainName  string
	ProjectName string
	Commitments []CommitmentNotification
}

// CommitmentTransferLeftover describes how much of a commitment is left over after part (or all) of it was consumed
// by a transfer. It is used in the commitment transfer algorithm in datamodel.ConfirmProjectCommitments().
// It also appears in type CommitmentNotification because that algorithm generates mail notifications.
type CommitmentTransferLeftover struct {
	Amount uint64
	ID     db.ProjectCommitmentID // currently only being used internally, not published in the mail (use UUID for that!)
}

// CommitmentNotification appears in type CommitmentGroupNotification.
type CommitmentNotification struct {
	Commitment db.ProjectCommitment
	DateString string
	Resource   util.AZResourceLocation
	Leftover   CommitmentTransferLeftover
}

// MailTemplate is a template for notification mails generated by Limes.
// It appears in type MailTemplateConfiguration.
type MailTemplate struct {
	Subject  string             `yaml:"subject"`
	Body     string             `yaml:"body"`
	Compiled *template.Template `yaml:"-"` // filled during Config.Validate()
}

// Compile compiles the provided mail body template.
// This needs to be run once before any call to Render().
func (t *MailTemplate) Compile() (err error) {
	t.Compiled, err = template.New("mail-body").Parse(t.Body)
	return err
}

// Render generates a mail notification for a completed commitment workflow.
func (t MailTemplate) Render(m CommitmentGroupNotification, projectID db.ProjectID, now time.Time) (db.MailNotification, error) {
	if len(m.Commitments) == 0 {
		return db.MailNotification{}, fmt.Errorf("mail: no commitments provided for projectID: %v", projectID)
	}

	if t.Subject == "" {
		return db.MailNotification{}, fmt.Errorf("mail: subject is empty for projectID: %v", projectID)
	}
	body, err := t.getMailContent(m)
	if err != nil {
		return db.MailNotification{}, err
	}
	if body == "" {
		return db.MailNotification{}, fmt.Errorf("mail: body has no content. Check the mail template. Halted at projectID: %v", projectID)
	}

	notification := db.MailNotification{
		ProjectID:        projectID,
		Subject:          t.Subject,
		Body:             body,
		NextSubmissionAt: now,
	}

	return notification, nil
}

func (t MailTemplate) getMailContent(m CommitmentGroupNotification) (string, error) {
	var ioBuffer bytes.Buffer
	tpl := t.Compiled
	if tpl == nil {
		return "", errors.New("mail: body is empty. Check the accessiblity of the mail template")
	}

	err := tpl.Execute(&ioBuffer, m)
	if err != nil {
		return "", err
	}

	return ioBuffer.String(), nil
}
